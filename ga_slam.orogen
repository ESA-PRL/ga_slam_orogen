name 'ga_slam'

using_library 'ga_slam'
using_library 'grid_map_cereal'
using_library 'pcl_common-1.7'
using_library 'opencv'

import_types_from 'base'

task_context 'Task' do
    needs_configuration

    ####### Properties #######
    property('mapLengthX', 'double', 10.0).
        doc 'X dimension of the map'

    property('mapLengthY', 'double', 10.0).
        doc 'Y dimension of the map'

    property('mapResolution', 'double', 0.05).
        doc 'Resolution of each square cell of the map'

    property('minElevation', 'double', -5.0).
        doc 'Minimum cutoff height of the voxelized point cloud'

    property('maxElevation', 'double', 5.0).
        doc 'Maximum cutoff height of the voxelized point cloud'

    property('voxelSize', 'double', 0.025).
        doc 'Dimension of each voxel of the point cloud'

    property('numParticles', 'int', 100).
        doc 'Number of particles used in the particle filter'

    property('resampleFrequency', 'int', 10).
        doc 'Number of iterations of the particle filter before resampling'

    property('initialSigmaX', 'double', 0.0).
        doc 'Sigma of gaussian distribution of x for particle initialization'

    property('initialSigmaY', 'double', 0.0).
        doc 'Sigma of gaussian distribution of y for particle initialization'

    property('initialSigmaYaw', 'double', 0.0).
        doc 'Sigma of gaussian distribution of yaw for particle initialization'

    property('predictSigmaX', 'double', 0.2).
        doc 'Sigma of gaussian distribution of x for particle prediction'

    property('predictSigmaY', 'double', 0.2).
        doc 'Sigma of gaussian distribution of y for particle prediction'

    property('predictSigmaYaw', 'double', Math::PI/18).
        doc 'Sigma of gaussian distribution of yaw for particle prediction'

    ####### States #######
    error_states 'TRANSFORM_NOT_FOUND'

    ####### Input Ports #######
    input_port('poseGuess', '/base/samples/RigidBodyState').
        doc 'Pose estimation (6D) with covariance and timestamp'

    input_port('hazcamCloud', '/base/samples/Pointcloud').
        doc 'Dense point cloud with timestamp in the sensor (HazCam) frame'

    input_port('loccamCloud', '/base/samples/Pointcloud').
        doc 'Dense point cloud with timestamp in the sensor (LocCam) frame'

    input_port('pancamCloud', '/base/samples/Pointcloud').
        doc 'Dense point cloud with timestamp in the sensor (PanCam) frame'

    input_port('pancamTransformation', '/base/samples/RigidBodyState').
        doc 'Transformation from pancam sensor frame to robot frame'

    input_port('orbiterCloud', '/base/samples/Pointcloud').
        doc 'Dense point cloud from the orbiter'

    ####### Output Ports #######
    output_port('elevationMap', '/base/samples/DistanceImage').
        doc 'Robot-centric elevation map (2.5D space representation)'

    output_port('estimatedPose', '/base/samples/RigidBodyState').
        doc 'Corrected pose estimation (6D) with covariance and timestamp'

    ####### Debug Ports #######
    property('debugInfoEnabled', 'bool', false).
        doc 'Output debug information. This must be enabled for the' +
            'other debug properties to have an effect'

    property('rawMapDebugEnabled', 'bool', false).
        doc 'Output the raw elevation map'

    property('cloudDebugEnabled', 'bool', false).
        doc 'Output processed point cloud and map point cloud'

    property('serializationDebugEnabled', 'bool', false).
        doc 'Serialize the raw and global maps and save them to disk'

    property('localMapPath', '/std/string', '/tmp/ga_slam_local_map.cereal').
        doc 'Path to save the serialized local elevation map'

    property('globalMapPath', '/std/string', '/tmp/ga_slam_global_map.cereal').
        doc 'Path to save the serialized global elevation map'

    property('posePath', '/std/string', '/tmp/ga_slam_pose.cereal').
        doc 'Path to save the serialized pose'

    output_port('rawElevationMap', '/base/samples/DistanceImage').
        doc 'Elevation map prior to the neighborhood fusion step'

    output_port('mapCloud', '/base/samples/Pointcloud').
        doc 'Point cloud in the map frame created from the raw map'

    ####### Transformer #######
    transformer do
        transform 'hazcam', 'body'
        transform 'loccam', 'body'
        transform 'body', 'ground'

        max_latency 0
    end

    periodic 0.5
end

