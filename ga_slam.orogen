name 'ga_slam'

using_library 'ga_slam'
using_library 'grid_map_cereal'
using_library 'pcl_common-1.7'

import_types_from 'base'

task_context 'Task' do
    needs_configuration

    ####### Properties #######
    property('mapSizeX', 'double', 10.0).
        doc 'X dimension of the map'

    property('mapSizeY', 'double', 10.0).
        doc 'Y dimension of the map'

    property('robotPositionX', 'double', 0.0).
        doc 'X position of the subject inside the map'

    property('robotPositionY', 'double', 0.0).
        doc 'Y position of the subject inside the map'

    property('mapResolution', 'double', 0.050).
        doc 'Resolution of each square cell of the map'

    property('voxelSize', 'double', 0.025).
        doc 'Dimension of each voxel of the point cloud'

    property('minElevation', 'double', -5.0).
        doc 'Minimum cutoff height of the voxelized point cloud'

    property('maxElevation', 'double', 5.0).
        doc 'Maximum cutoff height of the voxelized point cloud'

    ####### States #######
    reports 'INPUTS_NOT_ALIGNED'
    error_states 'TRANSFORM_NOT_FOUND',
        'INPUT_NOT_CONNECTED',
        'PARAMETERS_NOT_SET'

    ####### Input Ports #######
    input_port('pointCloud', '/base/samples/Pointcloud').
        doc 'Dense point cloud with timestamp in the sensor frame'

    input_port('pose', '/base/samples/RigidBodyState').
        doc 'Pose estimation (6D) with covariance and timestamp'

    ####### Output Ports #######
    output_port('elevationMap', '/base/samples/frame/Frame').
        doc 'Robot-centric elevation map (2.5D space representation)'

    output_port('correctedPose', '/base/samples/RigidBodyState').
        doc 'Corrected pose estimation (6D) with covariance and timestamp'

    ####### Debug Ports #######
    property('debugEnabled', 'bool', true).
        doc 'Output debug information'

    property('savePath', '/std/string', '/tmp/ga_slam_map.cereal').
        doc 'Path to save serialized elevation map'

    output_port('rawElevationMap', '/base/samples/frame/Frame').
        doc 'Elevation map prior to the neighborhood fusion step'

    output_port('filteredPointCloud', '/base/samples/Pointcloud').
        doc 'Filtered sparse point cloud in the map frame'

    output_port('mapPointCloud', '/base/samples/Pointcloud').
        doc 'Sparse point cloud in the map frame created from the raw map'

    ####### Transformer #######
    transformer do
        transform 'slamCamera', 'body'
        align_port 'pointCloud'
        max_latency 1.0
    end

    port_driven 'pointCloud'
end

